<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="responsive.css">
  <title>CO</title>
</head>

<body>
  <div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <a href="index.htm">Home</a>
    <a href="2CSE.htm">3 SEM CS</a>
    <a href="CONTACT.htm">Contact</a>
  </div>
  <script>
    function openNav() {
      document.getElementById("mySidenav").style.width = "250px";
    }

    function closeNav() {
      document.getElementById("mySidenav").style.width = "0";
    }
  </script>

  <header>
    <button style="font-size:40px;cursor:pointer;color:white;background-color:#b6eb7a;border:none;" onclick="openNav()">â˜°</button>
  </header>

  <marquee></marquee>
  <h1>Computer Organization(CO).</h1>
  <p><strong>NOTE:</strong> Make the video full screen and do watch</p>

  <table>
    <tr>
      <td>M1 L1</td>
      <td>Introduction to Computer Organization, Demonstration of C program to Assembly language program conversion, Basic operational concepts and the instruction execution steps with example.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/0A_aXofo3T0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L2</td>
      <td>Bus Structures, Types of Buses, Performance factors: Cache, Clock, Clock Rate, Clock Cycle, Performance Equation, Pipelining, Superscalar Operations, Role of Compiler, RISC, CISC, Performance Measurement and Equitation, Multiprocessor and Multi-computers</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/BAnE0utCyYM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L3</td>
      <td>Binary number system and hexadecimal number system in the perspective of memory addressing. Also conversion between these two number systems has been explained.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/MCS_bq7lWW0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L4</td>
      <td>How to assign addresses to memory locations. Addressing scheme is also discussed which helps to find size of memory based on address size. Byte addressing concept is also explained.
    </td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/5PA05HiMwqY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L5</td>
      <td>You can find explanation of word alignment and explained how to find whether a memory is aligned using word address. Also you can find explanation on Big Endian and Little Endian way of meory assignment.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/nKSBPE2zS8w" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L6</td>
      <td>Representation of character and strings using ASCII codes. Also I have explained how big and little endian assignments work with ASCII represented strings.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/0FuKSn9jwBo" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L7</td>
      <td>About instructions and sequences. The order of instructions execution is discussed in the perspective of memory.
    </td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/D51L8UlXLiM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L8</td>
      <td>Various condition codes and use of condition codes.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/429ktQm8th8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L9</td>
      <td>Various addressing modes used to refer the operands of an instruction with syntax and examples.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/x8ZUK7ZWyCM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L10</td>
      <td>How processor interacts or communicates with input and output devices.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/6r8TfTtySn4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L11</td>
      <td>Compare instruction and how it helps in decision making of conditional branching.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/CKWzeCrCYZ0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M1 L12</td>
      <td> Concepts of stack and how stack is implemented in memory. Also push and pop operations of stack are explained with example for better understanding.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/2gw3nl5LOnY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td>M2 L1</td>
      <td>How processor makes communication with input or output devices using program controlled I/O.</td>
      <td><iframe width="310" height="180" src="https://www.youtube.com/embed/J0zBzRrohuU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td><iframe width="310" height="180" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td><iframe width="310" height="180" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></td>
    </tr>
  </table>

</body>

</html>
